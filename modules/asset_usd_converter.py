"""
asset_usd_converter.py
----------------------
Converts 3D assets (e.g., .obj meshes) into USD format compatible with Isaac Sim.

Purpose in Pipeline:
    - Step 5 in `main.py`: takes the OBJ mesh generated by `terrain_mesh.py`
      and converts it into a USD stage that Isaac Sim can load.
    - Uses NVIDIA Omniverse's `omni.kit.asset_converter` extension.

Workflow:
    1. Enable the `omni.kit.asset_converter` extension in Isaac Sim.
    2. Call `convert_single_file()` with input OBJ and output USD paths.
    3. Optionally import materials from the source file.
    4. Runs the conversion task asynchronously and waits for completion.

Inputs:
    - in_path: Path to input mesh file (.obj or other supported formats).
    - out_path: Path to output USD file.
    - load_materials (bool): Whether to import source materials.

Outputs:
    - USD file saved at `out_path`.

Dependencies:
    - Isaac Sim (Omniverse Kit API)
    - omni.kit.asset_converter extension
    - asyncio

Example:
    convert_single_file(
        "output/terrain.obj",
        "output/terrain.usd",
        load_materials=True
    )
"""

import asyncio
import os
from isaacsim.core.utils.extensions import enable_extension

# Enable Omniverse Asset Converter extension
enable_extension("omni.kit.asset_converter")


async def convert(in_file, out_file, load_materials=False):
    """
    Asynchronously converts an asset to USD format.

    Args:
        in_file (str): Path to input asset (e.g., .obj).
        out_file (str): Path to output USD.
        load_materials (bool): If True, imports source materials.

    Returns:
        bool: True if conversion succeeded, False otherwise.
    """
    import omni.kit.asset_converter

    def progress_callback(progress, total_steps):
        # Optional: could log or display conversion progress here
        pass

    converter_context = omni.kit.asset_converter.AssetConverterContext()
    converter_context.ignore_materials = not load_materials

    instance = omni.kit.asset_converter.get_instance()
    task = instance.create_converter_task(
        in_file, out_file, progress_callback, converter_context
    )

    success = await task.wait_until_finished()
    return success


def convert_single_file(in_path: str, out_path: str, load_materials=True):
    """
    Converts a single asset file to USD.

    Args:
        in_path (str): Path to input mesh.
        out_path (str): Path to output USD.
        load_materials (bool): Whether to import materials.

    Returns:
        bool: True if conversion succeeded, False otherwise.
    """
    if not os.path.exists(in_path):
        print(f"[✘] Input file does not exist: {in_path}")
        return False

    print(f"[•] Converting {in_path} to {out_path}")
    result = asyncio.get_event_loop().run_until_complete(
        convert(in_path, out_path, load_materials)
    )

    if result:
        print(f"[✓] Conversion complete: {out_path}")
    else:
        print(f"[✘] Conversion failed for: {in_path}")

    return result
